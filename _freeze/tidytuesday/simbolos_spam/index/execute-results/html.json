{
  "hash": "854758b53f03bad5d6b00fc4b28211ec",
  "result": {
    "markdown": "---\ntitle: \"Símbolos comunes en correos de spam\"\ndescription: \"TidyTuesday del 15 de agosto de 2023\"\nauthor: \"Egoitz Carral\"\ndate: \"09/04/2023\"\nimage: \"image.jpg\"\ncategories: [2023, Plot, baseR] \ndate-modified: \"09/04/2023\"\nreference-location: block\nbibliography: referencias.bib\ncsl: https://www.zotero.org/styles/apa\nexecute: \n  freeze: true\n  cache: true\n---\n\n\nEl el TidyTuesday de esta semana [@tidytuesday0815], los datos que tenemos son sobre la aparición de los símbolos más comunes en los correos electrónicos de spam. Esta vez solo hay un dataset, lo que facilita el trabajo a la hora de realizar el gráfico final. Además, en vez de usar *ggplot2*, el gráfico estará hecho únicamente con las herramientas básicas de R.\n\n\n::: {.cell hash='index_cache/html/dataset_download_a705e57eca12835545996817b7d0e417'}\n\n```{.r .cell-code}\nspam <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-15/spam.csv')\n\nlibrary(tidyverse)\n```\n:::\n\n\nDespúes de cargar los datos, seleccionaremos únicamente aquellos que nos interesan y los adecuaremos para poder utilizarlos sin problemas.\n\n\n::: {.cell hash='index_cache/html/data-exploring_8f39f11c5c877ffca066117737cb8855'}\n\n```{.r .cell-code}\nhead(spam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  crl.tot dollar  bang money  n000  make yesno\n    <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>\n1     278  0     0.778  0     0     0    y    \n2    1028  0.18  0.372  0.43  0.43  0.21 y    \n3    2259  0.184 0.276  0.06  1.16  0.06 y    \n4     191  0     0.137  0     0     0    y    \n5     191  0     0.135  0     0     0    y    \n6      54  0     0      0     0     0    y    \n```\n:::\n\n```{.r .cell-code}\nspam_1 <- spam |> \n  mutate(yesno = factor(yesno, levels = c(\"y\", \"n\"), labels = c(\"yes\", \"no\")),\n         dollar = dollar * 100,\n         bang = bang * 100,\n         money = money * 100,\n         n000 = n000 * 100,\n         make = make * 100)\n\nspam_plot <- spam_1 |>\n  group_by(yesno) |> \n  summarize(dollar = mean(dollar),\n            bang = mean(bang),\n            money = mean(money),\n            n000 = mean(n000),\n            make = mean(make)) |> \n  pivot_longer(\n    cols = dollar:make,\n    names_to = \"Spam_signs\",\n    values_to = \"value\"\n  ) |> \n  pivot_wider(\n    names_from = yesno,\n    values_from = value\n  ) |> \n  ungroup() |> \n  arrange(desc(yes))\n\nspam_plot$Spam_signs[1] <- \"Símbolo\\nexclamación\"\nspam_plot$Spam_signs[2] <- \"Cadena\\n000\"\nspam_plot$Spam_signs[3] <- \"Palabra\\n'money'\"\nspam_plot$Spam_signs[4] <- \"Símbolo\\ndolar\"\nspam_plot$Spam_signs[5] <- \"Palabra\\n'make'\"\n```\n:::\n\n\nUna vez preparados los datos, es hora de hacer el gráfico final (un proceso algo más complicado que usando *ggplot2*, pero sin ser tampoco especialmente difícil), un gráfico de barras.\n\n\n::: {.cell layout-ncol=\"1\" hash='index_cache/html/static_plot_b01cf933143d075bb465625ffb66ca36'}\n\n```{.r .cell-code}\n# Código para guardar el gráfico en un archivo\n# jpeg(file = path,\n#     width = 1800,\n#     height = 1200,\n#     res = 300)\n\n# Fondo\npar(bg = rgb(50, 50, 50, maxColorValue = 255),\n    mar = c(6, 6, 4, 3))\n\nplot(1, xlab = \"\", ylab = \"\", xaxt = \"n\", yaxt = \"n\", main = \"\", bty = \"n\",\n     type = \"n\", ylim = c(0, 60), xlim = c(.25, 6))\n\n# Líneas\nabline(h = seq(0, 60, 10),\n       lty = 3,\n       col = gray(0.95), lwd = 1)\n\n# Etiquetas del eje y\nmtext(text = seq(10, 60, 10),\n      side = 2, at = seq(10, 60, 10),\n      las = 1, line = 1, col = gray(0.95))\n\n# Etiquetas de los símbolos de spam\nmtext(text = spam_plot$Spam_signs,\n      side = 1, at = 1:5, las = 1,\n      line = 1, col = gray(0.95))\n\n# Barras sí\nrect(xleft = 1:5 - .35 - .04 / 2,\n     ybottom = rep(0, 5),\n     xright = 1:5 - .04 / 2,\n     ytop = spam_plot$yes,\n     col = \"lightgreen\", border = NA)\n\n# Barras no\nrect(xleft = 1:5 + .04 / 2,\n     ybottom = rep(0,5),\n     xright = 1:5 + .35 + .04 / 2,\n     ytop = spam_plot$no,\n     col = \"#FF7470\", border = NA)\n\nlegend(5, 60, c(\"Sí\", \"No\"), col = c(\"lightgreen\", \"#FF7470\"),\n       pch = rep(15, 2), bty = \"n\", pt.cex = 1.5, text.col = \"white\")\n\n# Texto\nmtext(\"Porcentaje de aparición de diferentes\\nsímbolos en correos de spam\",\n      side = 3, cex = 1.5, col = \"white\")\n\nmtext(\"Porcentaje\", side = 2, col = \"white\", line = 3.5)\n\nmtext(\"TidyTuesday 15/08/2023\", side = 1, at = 0, adj = 0, line = 3, font = 3,\n      col = \"white\")\n```\n\n::: {.cell-output-display}\n![Gráfico de barras](index_files/figure-html/static_plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# dev.off() --> lo usaríamos si fuesemos a guardar el gráfico en un archivo\n```\n:::\n\n\n::: {refs}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}