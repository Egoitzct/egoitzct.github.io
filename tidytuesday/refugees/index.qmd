---
title: "Refugiados"
description: "TidyTuesday del 22 de agosto de 2023"
author: "Egoitz Carral"
date: "09/04/2023"
image: "image.jpg"
categories: [2023, Plot, ggplot, ggrepel, TidyTuesday, Plotly] 
date-modified: "09/04/2023"
reference-location: block
bibliography: referencias.bib
csl: https://www.zotero.org/styles/apa
execute: 
  freeze: true
  cache: true
---

Para el TidyTuesday de la semana del 22 de agosto, el tema es sobre refugiados. Después de leer la descripción que podemos encontrar en la página de github, he decidido hacer un gráfico en el que se incluyan los diez países que más refugiados han recibido.

Cómo siempre, el primer paso es cargar el *dataset* y los paquetes que usaremos para hacer el gráfico (qué, además de un gráfico estático, también usaremos *plotly* para añadir un poco de interacción).

```{r}
#| label: dataset_download
#| output: false

population <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-08-22/population.csv')

library(tidyverse)
library(janitor)
library(ggrepel)
library(scales)
library(plotly)
```

Despúes de cargar los datos, hay que observarlos y limpiarlos, de forma que todos los datos resultantes sean adecuados para hacer el gráfico.

```{r}
#| warning: false
#| label: data-exploring

glimpse(population)

data <- population |> 
  filter(refugees >= 100) |> 
  select(year, coo_name, coo_iso, coa_name, coa_iso, refugees, asylum_seekers) |> 
  group_by(coa_iso)

data <- data |> 
  select(year, coa_name, coa_iso, refugees, asylum_seekers) |> 
  group_by(coa_iso)

data_plot <- data |>
  group_by(coa_name) |> 
  summarise(refugees_sum = sum(refugees),
            asylum_sum = sum(asylum_seekers)) |> 
  ungroup()

data_plot <- data_plot |> 
  filter(refugees_sum >= 10000 & asylum_sum >= 10000)

data_plot_1 <- data_plot |> 
  filter(refugees_sum >= 7000000)

data_plot_2 <- data_plot |> 
  filter(refugees_sum < 7000000) |> 
  adorn_totals("row") |> 
  filter(coa_name == "Total")

data_plot_2$coa_name[1] <- "Others"

data_plot_1 <- data_plot_1 |> 
  arrange(refugees_sum)

data_plot <- rbind(data_plot_1, data_plot_2)
```

Después de tener los datos tal y como los necesitamos, es hora de hacer ambos gráficos (estático e interactivo.

```{r}
#| warning: false
#| label: static_plot
#| layout-ncol: 2

plot <- data_plot_1 |> 
  mutate(coa_name=factor(coa_name, levels=coa_name)) |> 
  ggplot(aes(x = coa_name, y = refugees_sum)) +
  geom_segment(aes(xend=coa_name, yend=0)) +
  geom_point(size = 4, color = "#0FDEE8") +
  coord_flip() +
  xlab("") +
  ylab("Total number of refugees (World`s first 10 countries)") +
  theme_bw() +
  geom_label_repel(aes(x = coa_name, label = refugees_sum)) +
  scale_y_continuous(trans = log2_trans(),
                     breaks = trans_breaks("log2", function(x) 2^x),
                     labels = label_number(scale_cut = cut_long_scale()))

interactive_plot <- data_plot_1 |> 
  mutate(coa_name=factor(coa_name, levels=coa_name)) |> 
  ggplot(aes(x = coa_name, y = refugees_sum)) +
  geom_segment(aes(xend=coa_name, yend=0)) +
  geom_point(size = 4, color = "#FF7E0F") +
  coord_flip() +
  xlab("") +
  ylab("Total number of refugees (World`s first 10 countries)") +
  theme_bw() +
  scale_y_continuous(trans = log2_trans(),
                     breaks = trans_breaks("log2", function(x) 2^x),
                     labels = label_number(scale_cut = cut_long_scale()))

plot

ggplotly(interactive_plot)
```

::: {refs}
:::
